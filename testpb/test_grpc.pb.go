// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.30.1
// source: test.proto

package testpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestServiceClient interface {
	PerformQuickTest(ctx context.Context, opts ...grpc.CallOption) (TestService_PerformQuickTestClient, error)
}

type testServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServiceClient(cc grpc.ClientConnInterface) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) PerformQuickTest(ctx context.Context, opts ...grpc.CallOption) (TestService_PerformQuickTestClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[0], "/testpb.TestService/PerformQuickTest", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServicePerformQuickTestClient{stream}
	return x, nil
}

type TestService_PerformQuickTestClient interface {
	Send(*QuickTestMessage) error
	Recv() (*QuickTestMessage, error)
	grpc.ClientStream
}

type testServicePerformQuickTestClient struct {
	grpc.ClientStream
}

func (x *testServicePerformQuickTestClient) Send(m *QuickTestMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServicePerformQuickTestClient) Recv() (*QuickTestMessage, error) {
	m := new(QuickTestMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestServiceServer is the server API for TestService service.
// All implementations must embed UnimplementedTestServiceServer
// for forward compatibility
type TestServiceServer interface {
	PerformQuickTest(TestService_PerformQuickTestServer) error
	mustEmbedUnimplementedTestServiceServer()
}

// UnimplementedTestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestServiceServer struct {
}

func (UnimplementedTestServiceServer) PerformQuickTest(TestService_PerformQuickTestServer) error {
	return status.Errorf(codes.Unimplemented, "method PerformQuickTest not implemented")
}
func (UnimplementedTestServiceServer) mustEmbedUnimplementedTestServiceServer() {}

// UnsafeTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServiceServer will
// result in compilation errors.
type UnsafeTestServiceServer interface {
	mustEmbedUnimplementedTestServiceServer()
}

func RegisterTestServiceServer(s grpc.ServiceRegistrar, srv TestServiceServer) {
	s.RegisterService(&TestService_ServiceDesc, srv)
}

func _TestService_PerformQuickTest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).PerformQuickTest(&testServicePerformQuickTestServer{stream})
}

type TestService_PerformQuickTestServer interface {
	Send(*QuickTestMessage) error
	Recv() (*QuickTestMessage, error)
	grpc.ServerStream
}

type testServicePerformQuickTestServer struct {
	grpc.ServerStream
}

func (x *testServicePerformQuickTestServer) Send(m *QuickTestMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServicePerformQuickTestServer) Recv() (*QuickTestMessage, error) {
	m := new(QuickTestMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestService_ServiceDesc is the grpc.ServiceDesc for TestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testpb.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PerformQuickTest",
			Handler:       _TestService_PerformQuickTest_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "test.proto",
}
