func getPlannedTestByID(db *sql.DB, testID int) (PlannedTest, error) {
	var t PlannedTest
	query := `
		SELECT 
			"Id", 
			"test_name", 
			"test_duration", 
			"number_of_agents", 
			"creation_date", 
			"test_type",
			"source_id",
			"target_id",
			"profile_id",
			"threshold_id",
			"In_progress",
			"failed",
			"completed",
			"Error"
		FROM "test"
		WHERE "Id" = $1 AND "test_type" = 'planned_test'
	`
	err := db.QueryRow(query, testID).Scan(
		&t.ID,
		&t.TestName,
		&t.TestDuration,
		&t.NumberOfAgents,
		&t.CreationDate,
		&t.TestType,
		&t.SourceID,
		&t.TargetID,
		&t.ProfileID,
		&t.ThresholdID,
		&t.InProgress,
		&t.Failed,
		&t.Completed,
		&t.Error,
	)
	return t, err
}


func GetTestConfig(db *sql.DB, testID int) (*TestConfig, error) {
	log.Printf("üîç Recherche config pour test ID: %d", testID)

	query := `SELECT 
        "Id",      
		test_type,          
        test_name, 
        test_duration, 
        number_of_agents,     
        source_id, 
        target_id, 
        profile_id, 
        threshold_id
        FROM test
        WHERE "Id" = $1`

	var config TestConfig
	err := db.QueryRow(query, testID).Scan(
		&config.TestID,
		&config.TestType,
		&config.Name,
		&config.Duration,
		&config.NumberOfAgents,
		&config.SourceID,
		&config.TargetID,
		&config.ProfileID,
		&config.ThresholdID,
	)

	if err != nil {
		log.Printf("‚ùå Erreur DB: %v", err)
		return nil, fmt.Errorf("erreur base de donn√©es: %v", err)
	}

	return &config, nil


	
// configuration totale du test
func GetFullTestConfig(db *sql.DB, testID int) (*TestConfigWithAgents, error) {
	query := `
		SELECT 
			t."Id",
			t.test_name,
			t.test_duration::text,  -- CAST de l'interval en texte
			t.number_of_agents,
			t.source_id,
			sa."Address" AS source_ip,
			sa."Port" AS source_port,
			t.target_id,
			ta."Address" AS target_ip,
			ta."Port" AS target_port,
			t.profile_id,
			t.threshold_id
		FROM test t
		JOIN "Agent_List" sa ON t.source_id = sa.id
		JOIN "Agent_List" ta ON t.target_id = ta.id
		WHERE t."Id" = $1
	`

	var config TestConfigWithAgents

	err := db.QueryRow(query, testID).Scan(
		&config.TestID,
		&config.Name,
		&config.Duration,
		&config.NumberOfAgents,
		&config.SourceID,
		&config.SourceIP,
		&config.SourcePort,
		&config.TargetID,
		&config.TargetIP,
		&config.TargetPort,
		&config.ProfileID,
		&config.ThresholdID,
	)

	if err != nil {
		return nil, fmt.Errorf("erreur lors de la r√©cup√©ration de la configuration compl√®te: %v", err)
	}

	return &config, nil
}


type TestConfigWithAgents struct {
	TestID         int
	TestType       string
	Name           string
	Duration       string
	NumberOfAgents int
	SourceID       int
	SourceIP       string
	SourcePort     int
	TargetID       int
	TargetIP       string
	TargetPort     int
	ProfileID      int
	ThresholdID    int
}



type CreateGroupPayload struct {
	GroupName    string   `json:"group_name"`
	CreationDate string   `json:"creation_date"`
	AgentIDs     []int    `json:"agent_ids"`
}



type AgentLinkPayload struct {
	GroupID  int   `json:"group_id"`
	AgentIDs []int `json:"agent_ids"`
}

type TestConfig struct {
    TestID         int    `json:"test_id"`
    TestType       string `json:"test_type"`
    Name           string `json:"name"`
    Duration       string `json:"duration"`
    NumberOfAgents int    `json:"number_of_agents"`
    SourceID       int    `json:"source_id"`
    SourceIP       string `json:"source_ip"`     
    SourcePort     int    `json:"source_port"`   
    TargetID       int    `json:"target_id"`
    TargetIP       string `json:"target_ip"`     
    TargetPort     int    `json:"target_port"` 
    ProfileID      int    `json:"profile_id"`
    ThresholdID    int    `json:"threshold_id"`
}



type MinimalTestConfiguration struct {
    TestID          int           `json:"test_id"`
    Duration        time.Duration `json:"duration"`
    SourceIP        string        `json:"source_ip"`
    SourcePort      int           `json:"source_port"`
    TargetIP        string        `json:"target_ip"`
    TargetPort      int           `json:"target_port"`
    PacketSize      int           `json:"packet_size"`
    SendingInterval time.Duration `json:"sending_interval"`
}

func NewMinimalConfig(full *FullTestConfiguration) *MinimalTestConfiguration {
    return &MinimalTestConfiguration{
        TestID:          full.TestID,
        Duration:        full.Duration,
        SourceIP:        full.SourceIP,
        SourcePort:      full.SourcePort,
        TargetIP:        full.TargetIP,
        TargetPort:      full.TargetPort,
        PacketSize:      full.Profile.PacketSize,
        SendingInterval: full.Profile.SendingInterval,
    }
}



type AgentRole struct {
	ID        int      `json:"id"`
	Role      string   `json:"role"`
	TargetIDs []int    `json:"target_ids,omitempty"`
	IP        string   `json:"ip"`   // Ajout n√©cessaire
	Port      int      `json:"port"` // Ajout n√©cessaire
}


func saveResultsToDB(db *sql.DB, qos QoSMetrics) error {
	_, err := db.Exec(`
		INSERT INTO "Test_Results"
			packet_loss_percent,
			avg_latency_ms,
			avg_jitter_ms,
			avg_throughput_kbps,
			total_jitter
		) VALUES ($1, $2, $3, $4, $5)`,
		qos.PacketLossPercent,
		qos.AvgLatencyMs,
		qos.AvgJitterMs,
		qos.AvgThroughputKbps,
		qos.TotalJitter,
	)
	if err != nil {
		log.Println("Erreur insertion dans DB :", err)
	} else {
		log.Println("R√©sultat ins√©r√© avec succ√®s !")
	}
	return err
}