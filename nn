// Préparer un paquet SessionRequest
	packet := SendSessionRequestPacket{
		SenderAddress: func() [16]byte {
			var ip [16]byte
			copy(ip[:], net.ParseIP("127.0.0.1").To16())
			return ip
		}(),
		ReceiverPort:  5000,
		SenderPort:    6000,
		PaddingLength: 0,
		StartTime:     uint32(time.Now().Unix()),
		Timeout:       30,
		TypeP:         0x00,
	}

	// 1. Envoyer le paquet Session Request
	fmt.Println("Envoi du paquet Session Request...")
	serializedPacket, err := SerializePacket(&packet)
	if err != nil {
		log.Fatalf("Erreur de sérialisation du paquet Session-Request : %v", err)
	}
	err = SendPacket(serializedPacket, "127.0.0.1", 5000)
	if err != nil {
		log.Fatalf("Erreur lors de l'envoi du paquet Session-Request : %v", err)
	}
	
	// 2. Réception du paquet Accept-session et validation
	receivedData, err := receivePacket()
	if err != nil {
		log.Fatalf("Erreur lors de la réception d'Accept-session : %v", err)
	}
	if !validateSessionAcceptResponse(receivedData) {
		log.Fatalf("Réponse d'Accept-session invalide ou erreur serveur")
	}
	fmt.Println("Paquet Accept-session reçu.")

	// 3. Préparer le paquet Start Session
	startSessionPacket := StartSessionPacket{
		MBZ:  0,
		HMAC: [16]byte{},
	}
	fmt.Println("Envoi du paquet Start Session...")
	serializedStartSessionPacket, err := SerializeStartPacket(&startSessionPacket)
	if err != nil {
		log.Fatalf("Erreur de sérialisation du paquet Start Session : %v", err)
	}
	err = SendPacket(serializedStartSessionPacket, "127.0.0.1", 5000)
	if err != nil {
		log.Fatalf("Erreur lors de l'envoi du paquet Start Session : %v", err)
	}
	// 4. Réception du paquet Start-ACK et validation
	receivedData, err = receivePacket()
	if err != nil {
		log.Fatalf("Erreur lors de la réception Start-ACK : %v", err)
	}
	if !validateStartSessionAck(receivedData) {
		log.Fatalf("Réponse Start-ACK invalide ou erreur serveur")
	}
	fmt.Println("Paquet Start-ACK reçu.")

	// 8. Préparer le paquet Stop Session
	stopSessionPacket := StopSessionPacket{
		Accept:           0,
		MBZ:              0,
		NumberOfSessions: 1,
		HMAC:             [16]byte{},
	}
	fmt.Println("Envoi du paquet Stop Session...")
	serializedStopSessionPacket, err := SerializeStopSession(&stopSessionPacket)
	if err != nil {
		log.Fatalf("Erreur de sérialisation du Stop-Ack : %v", err)
	}
	err = SendPacket(serializedStopSessionPacket, "127.0.01", 5000)
	if err != nil {
		log.Fatalf("Erreur lors de l'envoi du Stop Session : %v", err)
	}

//////////////////////////////
	for {

		// Identifier le type de paquet reçu
		packetType := identifyPacketType(data)

		switch packetType {
		case "SessionRequest":
			// Paquet Request-Session reçu, envoyer Accept-Session
			log.Println("Paquet Request-Session reçu.")
			acceptSessionPacket := SessionAcceptPacket{
				Accept: 0,
				MBZ:    0,
				HMAC:   [16]byte{},
			}
			serializedPacket, err := SerializeAcceptPacket(&acceptSessionPacket)
			if err != nil {
				log.Printf("Erreur de sérialisation du paquet Accept-Session : %v", err)
				continue
			}
			err = SendPacket(serializedPacket, "127.0.0.1", 5000)
			if err != nil {
				log.Fatalf("Erreur de sérialisation du Start-Session : %v", err)
			}

		case "StartSession":
			// Paquet Start-Session reçu, envoyer Start-Ack
			log.Println("Paquet Start-Session reçu.")
			startAckPacket := StartAckPacket{
				Accept: 0,
				MBZ:    0,
				HMAC:   [16]byte{},
			}
			serializeStartACKtPacket, err := SerializeStartACKtPacket(&startAckPacket)
			if err != nil {
				log.Printf("Erreur de sérialisation du paquet Start-Ack : %v", err)
				continue
			}
			err = SendPacket(serializeStartACKtPacket, "127.0.0.1", 5000)
			if err != nil {
				log.Fatalf("Erreur de sérialisation du paquet Start-Ack  : %v", err)
			}
		}

		case "StopSession":
		log.Println("Paquet Stop-Session reçu.")
		// Tu peux ajouter des actions supplémentaires ici, si nécessaire

		default:
		// Paquet inconnu reçu
		log.Println("Paquet inconnu reçu.")
	}

// Exemple de construction du paquet Accept-Session
func buildAcceptSessionPacket() []byte {
	acceptSessionPacket := SessionAcceptPacket{
		Accept: 0,
		MBZ:    0,
		HMAC:   [16]byte{},
	}
	serializedPacket, err := SerializeAcceptPacket(&acceptSessionPacket)
	if err != nil {
		log.Fatalf("Erreur de sérialisation du paquet Accept-Session : %v", err)
	}
	return serializedPacket
}

// Exemple de construction du paquet Start-Ack
func buildStartAckPacket() []byte {
	startAckPacket := StartAckPacket{
		Accept: 0,
		MBZ:    0,
		HMAC:   [16]byte{},
	}
	serializedPacket, err := SerializeStartACKtPacket(&startAckPacket)
	if err != nil {
		log.Fatalf("Erreur de sérialisation du paquet Start-Ack : %v", err)
	}
	return serializedPacket
}









"google.golang.org/grpc/codes"
"google.golang.org/grpc/status"










	// Lancer le serveur WebSocket en parallèle
	go func() {
		http.HandleFunc("/ws", handleWebSocket)
		log.Println("Serveur WebSocket sur le port 8080...")
		log.Fatal(http.ListenAndServe(":8080", nil))
	}()


	// Serveur WebSocket pour recevoir les résultats
func handleWebSocket(w http.ResponseWriter, r *http.Request) {
	conn, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Println("Erreur WebSocket:", err)
		return
	}
	defer conn.Close()

	
// WebSocket : gestion des messages entrants
var upgrader = websocket.Upgrader{
	CheckOrigin: func(r *http.Request) bool { return true },
}


for {
	_, msg, err := conn.ReadMessage()
	if err != nil {
		log.Println("Erreur de lecture WebSocket:", err)
		break
	}
	// Afficher le message reçu de l'agent
	fmt.Println("Résultat reçu de l'agent :", string(msg))
	// Envoyer une réponse au client WebSocket
	if err := conn.WriteMessage(websocket.TextMessage, []byte("Message reçu avec succès")); err != nil {
		log.Println("Erreur lors de l'envoi de message WebSocket:", err)
		break
	}
}



***************agenet: fmt.Println("Test QoS reçu du serveur:", req.TestId, req.Parameters)

// Attente et préparation des résultats
testResult := fmt.Sprintf("Test ID: %s - Latence mesurée: 50ms", req.Parameters)

// Connexion WebSocket au serveur
ws, _, err := websocket.DefaultDialer.Dial("ws://localhost:8080/ws", nil)
if err != nil {
	log.Fatalf("Erreur WebSocket: %v", err)
}
defer ws.Close()

// Envoi des résultats
err = ws.WriteMessage(websocket.TextMessage, []byte(testResult))
if err != nil {
	log.Fatalf("Erreur d'envoi WebSocket: %v", err)
}

fmt.Println("Résultat envoyé au serveur via WebSocket")

// Nettoyage
defer func() {
	ws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "Fin de communication"))
	ws.Close()
}()
**********metrics
// 4. Calculer les métriques finales
if Stats.SentPackets > 0 {
	qos.PacketLossPercent = float64(Stats.SentPackets-Stats.ReceivedPackets) / float64(Stats.SentPackets) * 100
}
//calcul moyenne
if len(Stats.LatencySamples) > 0 {
	var totalLatency int64
	for _, lat := range Stats.LatencySamples {
		totalLatency += lat
	}
	qos.AvgLatencyMs = totalLatency / int64(len(Stats.LatencySamples)) / 1e6
	qos.AvgJitterMs = qos.TotalJitter / int64(len(Stats.LatencySamples)-1) / 1e6
}

if params.Duration.Seconds() > 0 {
	qos.AvgThroughputKbps = float64(Stats.TotalBytesReceived*8) / params.Duration.Seconds() / 1024
}
SetLatestMetrics(qos)

return Stats,qos, nil
}

// Struct pour les paramètres parsés
type TestParams struct {
TargetIP       string
TargetPort     int
Duration       time.Duration
PacketInterval time.Duration
}

// Extraire  les paramètres
func parseTestParameters(input string) (*TestParams, error) {
params := &TestParams{
	// Valeurs par défaut
	TargetIP:       "127.0.0.1",
	TargetPort:     5000,
	Duration:       30 * time.Second,
	PacketInterval: 1 * time.Second,
}

// Exemple de parsing simple (à adapter)
parts := strings.Split(input, ",")
for _, part := range parts {
	kv := strings.Split(part, "=")
	if len(kv) != 2 {
		continue
	}

	switch strings.TrimSpace(kv[0]) {
	case "target":
		params.TargetIP = strings.TrimSpace(kv[1])
	case "port":
		if port, err := strconv.Atoi(kv[1]); err == nil {
			params.TargetPort = port
		}
	case "duration":
		if dur, err := time.ParseDuration(kv[1]); err == nil {
			params.Duration = dur
		}
	case "interval":
		if interval, err := time.ParseDuration(kv[1]); err == nil {
			params.PacketInterval = interval
		}
	}
}

return params, nil
}
*******************autre******************
type PacketStats struct {
	SentPackets        int
	ReceivedPackets    int
	TotalBytesSent     int64
	TotalBytesReceived int64
	LastLatency        int64
	StartTime          time.Time
	LatencySamples     []int64
	TargetAddress      string
	TargetPort         int
	
}