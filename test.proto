syntax = "proto3";

package testpb;

option go_package = "./testpb";



// ===== Service principal pour les tests rapides =====
service TestService {
  rpc PerformQuickTest(stream QuickTestMessage) returns (stream QuickTestMessage);
}

// ===== Message de configuration =====
message TestParameters {
  string source_ip = 1;
  int32 source_port = 2;
  string target_ip = 3;
  int32 target_port = 4;
  int32 duration_sec = 5;
  int32 packet_size = 6;
  int32 interval_millis = 7;
}

// ===== Nouveau : Profile =====
message Profile {
  int32 id = 1;
  int64 sending_interval = 2; // en nanosecondes
  int32 packet_size = 3;
}



// ===== Nouveau : TestConfig complet =====
message TestConfig {
  int32 test_id = 1;
  string name = 2;
  int64 duration = 3; // en millisecondes
  int32 number_of_agents = 4;
  int32 source_id = 5;
  string source_ip = 6;
  int32 source_port = 7;
  int32 target_id = 8;
  string target_ip = 9;
  int32 target_port = 10;
  int32 profile_id = 11;

    Profile profile = 12;
}

// ===== Messages pour les tests =====
message QuickTestRequest {
  string test_id = 1;
  TestParameters parameters = 2;
  TestConfig config = 3; // 👈 ajout de la configuration complète
}

message QuickTestResponse {
  string status = 1;  // "received", "started", "error", etc.
}


message QuickTestMessage {
  oneof message {
    QuickTestRequest request = 1;
    QuickTestResponse response = 2;
  }
}

// ===== Health check =====
service Health {
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

message HealthCheckRequest {}

message HealthCheckResponse {
  string status = 1; // "OK" ou "FAIL"
}